name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-south-2

    - name: Get EC2 and RDS details
      run: |
        echo "EC2_HOST=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_PORT=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_NAME=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBName'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_SECRET_NAME=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBSecretName'].OutputValue" --output text)" >> $GITHUB_ENV

    - name: Get DB credentials
      run: |
        DB_CREDS=$(aws secretsmanager get-secret-value --secret-id ${{ env.DB_SECRET_NAME }} --query SecretString --output text)
        echo "DB_USERNAME=$(echo $DB_CREDS | jq -r .username)" >> $GITHUB_ENV
        echo "DB_PASSWORD=$(echo $DB_CREDS | jq -r .password)" >> $GITHUB_ENV

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      run: |
        # Create .env file
        cat << EOF > .env
        DJANGO_SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}'
        DEBUG=False
        ALLOWED_HOSTS=${{ env.EC2_HOST }},localhost,127.0.0.1
        DB_NAME='${{ env.DB_NAME }}'
        DB_USER='${{ env.DB_USERNAME }}'
        DB_PASSWORD='${{ env.DB_PASSWORD }}'
        DB_HOST='${{ env.DB_ENDPOINT }}'
        DB_PORT=${{ env.DB_PORT }}
        CELERY_BROKER_URL='${{ env.CELERY_BROKER_URL }}'
        EOF

        # Copy files to EC2
        scp -r ./* .env ec2-user@${{ env.EC2_HOST }}:/home/ec2-user/app

        # Run deployment script
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=30 ec2-user@${{ env.EC2_HOST }} '
          cd /home/ec2-user/app
          set -a
          source .env
          set +a
          bash deploy_script.sh
        '