name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-south-2

    - name: Get EC2 and RDS details
      run: |
        echo "EC2_HOST=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='PublicIP'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBEndpoint'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_PORT=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBPort'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_NAME=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBName'].OutputValue" --output text)" >> $GITHUB_ENV
        echo "DB_SECRET_NAME=$(aws cloudformation describe-stacks --stack-name ExampleDeploymentCdkStack --query "Stacks[0].Outputs[?OutputKey=='DBSecretName'].OutputValue" --output text)" >> $GITHUB_ENV

    - name: Get DB credentials
      run: |
        DB_CREDS=$(aws secretsmanager get-secret-value --secret-id ${{ env.DB_SECRET_NAME }} --query SecretString --output text)
        echo "DB_USERNAME=$(echo $DB_CREDS | jq -r .username)" >> $GITHUB_ENV
        echo "DB_PASSWORD=$(echo $DB_CREDS | jq -r .password)" >> $GITHUB_ENV

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      run: |
        scp -r ./* ec2-user@${{ env.EC2_HOST }}:/home/ec2-user/app
        ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=30 ec2-user@${{ env.EC2_HOST }} << 'EOF'
          set -e
          cd /home/ec2-user/app
          
          echo "Step 1: Setting up Python environment"
          sudo amazon-linux-extras enable python3.8
          sudo yum install -y python3.8
          /usr/bin/python3.8 -m venv venv
          source venv/bin/activate
          
          echo "Step 2: Installing dependencies"
          pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "Step 3: Setting up environment variables"
          cat > .env << EOT
DJANGO_SECRET_KEY='$DJANGO_SECRET_KEY'
DEBUG=False
ALLOWED_HOSTS=$EC2_HOST,localhost,127.0.0.1
DB_NAME='$DB_NAME'
DB_USER='$DB_USERNAME'
DB_PASSWORD='$DB_PASSWORD'
DB_HOST='$DB_ENDPOINT'
DB_PORT=$DB_PORT
CELERY_BROKER_URL='$CELERY_BROKER_URL'
EOT
          
          echo "Step 4: Setting PYTHONPATH"
          export PYTHONPATH=$PYTHONPATH:/home/ec2-user/app
          
          echo "Step 5: Checking PostgreSQL client"
          which psql
          psql --version
          
          echo "Step 6: Testing database connection"
          if ! PGPASSWORD='$DB_PASSWORD' psql -h '$DB_ENDPOINT' -U '$DB_USERNAME' -d '$DB_NAME' -c "SELECT 1;"; then
            echo "Database connection failed"
            exit 1
          fi
          
          echo "Step 7: Ensuring database exists"
          PGPASSWORD='$DB_PASSWORD' psql -h '$DB_ENDPOINT' -U '$DB_USERNAME' -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || PGPASSWORD='$DB_PASSWORD' psql -h '$DB_ENDPOINT' -U '$DB_USERNAME' -d postgres -c "CREATE DATABASE $DB_NAME"
          
          echo "Step 8: Running Django commands"
          cd api_project
          python manage.py collectstatic --noinput
          python manage.py migrate
          
          echo "Step 9: Restarting uvicorn service"
          sudo systemctl restart uvicorn.service
          
          echo "Deployment completed successfully"
EOF